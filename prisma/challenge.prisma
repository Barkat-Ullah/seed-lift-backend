model Challenge {
    id          String          @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    description String
    category    String
    attachment  String
    tags        String[]
    seedPoints  Int
    deadline    DateTime
    status      ChallengeStatus @default(PENDING)
    isActive    Boolean         @default(true)

    founderId String @db.ObjectId
    seederId  String @db.ObjectId

    seeder  Seeder  @relation(fields: [seederId], references: [id])
    founder Founder @relation(fields: [founderId], references: [id])

    comment   Comment[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    @@map("challenge")
}

model React {
    id        String @id @default(auto()) @map("_id") @db.ObjectId
    founderId String @db.ObjectId
    seederId  String @db.ObjectId

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([founderId, seederId])
    @@map("love_react")
}

model Comment {
    id             String  @id @default(auto()) @map("_id") @db.ObjectId
    content        String
    image          String?
    seederId       String  @db.ObjectId
    challengeId    String  @db.ObjectId
    parentId       String? @db.ObjectId
    isFounderReply Boolean @default(false)

    seeder Seeder @relation(fields: [seederId], references: [id])

    challenge Challenge? @relation(fields: [challengeId], references: [id])
    parent    Comment?   @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    replies   Comment[]  @relation("CommentReplies")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("comment")
}

enum ChallengeStatus {
    PENDING
    FINISHED
}
